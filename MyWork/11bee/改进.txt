1.基础组件：
    ES：和MySQL的区别？Java中怎么用ES？怎么拼接DSL语句？
    Dubbo：RPC的概念，使用场景，如何配置，访问远程服务中的接口的过程，*(从RPC的角度解释一下Dubbo和MQ的区别？)
    QMQ
    QSchedule定时任务：如何通过Param解析调度中心执行任务时配置的参数？
    Redis：几个API的使用，如何配置？
    线程池：几种线程池，几个参数含义，几种状态，线程池的阻塞(callable，阻塞队列，CountDownLatch)，根据不同场景选择合适的线程池类型并且配置合适的参数
    Guava：Guava常用的api，尤其是Cache的使用
    Nginx：干啥的？分发请求的过程？如何做到负载均衡的？

2.代码规范：
    每个方法前都要写注释
    数值要写成常量，比如Redis的key要写成"frc_voice_etl_count_featurekeys_"格式的，通过项目名作为前缀，避免我们的key和别人的相同
    避免在log输出中查询结果，导致在log和返回值中查询两次
    注意异常检测以及性能监控，使用try catch和QMonitor
    枚举的使用
    最后一次提交代码的时候一定要和master的代码diff一下
    开启使用的资源，务必在finally中释放，比如在finally中shutDown线程池
    static修饰的变量/常量不能手残注入，会报错的...

3.其他
    SpringMVC返回一个对象和返回ModelAndView的区别？
        ModelAndView是通过比如说EL表达式，使用SpringMVC中的ViewResolver把数据在页面上填充显示，然后DispatcherServlet再把已经渲染好的视图返回给用户(这个视图就是由HTML标签组成，然后客户端浏览器根据返回的结果解析) 
    如何快速理清一个项目？
        从数据的流向分析，从请求过来进入控制器，怎么处理数据，到调用什么接口，怎么...进行分析
    如何更好的打日志？
        为了debug的时候更加清晰，日志里要有方法名，展示的参数名...注意避免在日志打印的时候重新进行查询操作，在上线之前把多余的日志都删了
    QMonitor监控的使用
    为什么使用线程池处理任务？和单线程相比性能如何？这种场景有必要使用线程池吗？
    定时任务配合线程池的坑？要是第一个定时任务没结束第二个又来了怎么办？怎么让任务队列的调度阻塞至第一个任务执行完成？
    如何更好的使用Linux命令查看日志？ grep "xxxxx" common.log | tail -10f     tailf admin.log 
    如何控制定时任务的执行时间间隔和Redis的缓存刷新时间间隔？(Redis存储相同的Key时，会进行value的自动刷新，所以不必设置Redis的刷新时间间隔)

4.优化
    性能优化：1.sql语句的优化，比如在MyBatis中sql id替代select *
             2.Cache的使用：
               为什么使用缓存？
                    因为每次进行数据的查询和新数据的刷新的时候，如果使用物理内存，IO的开销是更大的。
               我们可以选择哪些缓存方式？
                    比如GuavaCache(一种LoadingCache)，这是一种基于k-v的本地缓存，在应用程序启动时开启，把数据存储至内存中。
               在对查询的实时性要求不高时， 把MySQL中查询到的数据放入GuavaCache中，然后缓存进行定时刷新或根据某种触发方式刷新，使用时需要注意缓存的几种刷新策略。
                    再比如ConcurrentHashMap的使用，我们也可以使用ConcurrentHashMap作为缓存，这和GuavaCache存储结构挺像的，都是基于k-v的内存缓存。
             3.定时任务的使用，同上，在对查询的实时性要求不高时，设置定时任务的时间间隔，每隔一段时间之后进行查询，避免实时查询
    风格优化：1.lambda表达式的使用
             2.各种Utils的使用，比如StringUtils和CollectionUtils，减少代码量
             3.代码的复用，动手之前好好看看前人已经写过的代码，免得做相同的工作
             4.思考清楚每个方法的职责，什么时候用抽出来，什么时候写一次就行了
             5.代码的适用性，举个例子：我需要从Redis中查询从而获取一个Set集合。我需要通过获取返回类型为Set<Tuple>的结果，遍历时通过Tuple来获取K-V，但是我不应该返回一个Set<Tuple>类型的集合，我应该把Set<Tuple>重新封装至一个Map中然后返回。假如，以后要把这个RedisService的接口作为Dubbo的生产者，别人要调用我们的Redis服务，
             但是恰恰人家那块并不支持Redis(没有引入Redis的依赖)，那他要怎么才能用我的接口呢？所以我需要把Ser<Tuple>重新封装成一个Map,增强代码的通用/适用性。


5.前端
    ajax和form的使用，什么场景使用ajax或者form表单，比如excel导出就不能使用ajax，比如需要回调的场景需要使用ajax
    VeloCity模板的使用








    